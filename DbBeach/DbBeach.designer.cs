#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DbBeach
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AlgarveBeach")]
	public partial class DbBeachDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClientes(Clientes instance);
    partial void UpdateClientes(Clientes instance);
    partial void DeleteClientes(Clientes instance);
    partial void InsertConcelho(Concelho instance);
    partial void UpdateConcelho(Concelho instance);
    partial void DeleteConcelho(Concelho instance);
    partial void InsertFreguesias(Freguesias instance);
    partial void UpdateFreguesias(Freguesias instance);
    partial void DeleteFreguesias(Freguesias instance);
    partial void InsertHospedagem(Hospedagem instance);
    partial void UpdateHospedagem(Hospedagem instance);
    partial void DeleteHospedagem(Hospedagem instance);
    partial void InsertPraia(Praia instance);
    partial void UpdatePraia(Praia instance);
    partial void DeletePraia(Praia instance);
    partial void InsertRestaurantes(Restaurantes instance);
    partial void UpdateRestaurantes(Restaurantes instance);
    partial void DeleteRestaurantes(Restaurantes instance);
    #endregion
		
		public DbBeachDataContext() : 
				base(global::DbBeach.Properties.Settings.Default.AlgarveBeachConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbBeachDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbBeachDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbBeachDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbBeachDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Clientes> Clientes
		{
			get
			{
				return this.GetTable<Clientes>();
			}
		}
		
		public System.Data.Linq.Table<Concelho> Concelho
		{
			get
			{
				return this.GetTable<Concelho>();
			}
		}
		
		public System.Data.Linq.Table<Freguesias> Freguesias
		{
			get
			{
				return this.GetTable<Freguesias>();
			}
		}
		
		public System.Data.Linq.Table<Hospedagem> Hospedagem
		{
			get
			{
				return this.GetTable<Hospedagem>();
			}
		}
		
		public System.Data.Linq.Table<Praia> Praia
		{
			get
			{
				return this.GetTable<Praia>();
			}
		}
		
		public System.Data.Linq.Table<Restaurantes> Restaurantes
		{
			get
			{
				return this.GetTable<Restaurantes>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clientes")]
	public partial class Clientes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDcliente;
		
		private string _Username;
		
		private string _Password;
		
		private string _PNome;
		
		private string _UNome;
		
		private string _EMail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDclienteChanging(int value);
    partial void OnIDclienteChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPNomeChanging(string value);
    partial void OnPNomeChanged();
    partial void OnUNomeChanging(string value);
    partial void OnUNomeChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    #endregion
		
		public Clientes()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcliente", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDcliente
		{
			get
			{
				return this._IDcliente;
			}
			set
			{
				if ((this._IDcliente != value))
				{
					this.OnIDclienteChanging(value);
					this.SendPropertyChanging();
					this._IDcliente = value;
					this.SendPropertyChanged("IDcliente");
					this.OnIDclienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PNome", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string PNome
		{
			get
			{
				return this._PNome;
			}
			set
			{
				if ((this._PNome != value))
				{
					this.OnPNomeChanging(value);
					this.SendPropertyChanging();
					this._PNome = value;
					this.SendPropertyChanged("PNome");
					this.OnPNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UNome", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string UNome
		{
			get
			{
				return this._UNome;
			}
			set
			{
				if ((this._UNome != value))
				{
					this.OnUNomeChanging(value);
					this.SendPropertyChanging();
					this._UNome = value;
					this.SendPropertyChanged("UNome");
					this.OnUNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Concelho")]
	public partial class Concelho : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDconcelho;
		
		private string _NomeConcelho;
		
		private EntitySet<Freguesias> _Freguesias;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDconcelhoChanging(int value);
    partial void OnIDconcelhoChanged();
    partial void OnNomeConcelhoChanging(string value);
    partial void OnNomeConcelhoChanged();
    #endregion
		
		public Concelho()
		{
			this._Freguesias = new EntitySet<Freguesias>(new Action<Freguesias>(this.attach_Freguesias), new Action<Freguesias>(this.detach_Freguesias));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDconcelho", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDconcelho
		{
			get
			{
				return this._IDconcelho;
			}
			set
			{
				if ((this._IDconcelho != value))
				{
					this.OnIDconcelhoChanging(value);
					this.SendPropertyChanging();
					this._IDconcelho = value;
					this.SendPropertyChanged("IDconcelho");
					this.OnIDconcelhoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NomeConcelho", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string NomeConcelho
		{
			get
			{
				return this._NomeConcelho;
			}
			set
			{
				if ((this._NomeConcelho != value))
				{
					this.OnNomeConcelhoChanging(value);
					this.SendPropertyChanging();
					this._NomeConcelho = value;
					this.SendPropertyChanged("NomeConcelho");
					this.OnNomeConcelhoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concelho_Freguesias", Storage="_Freguesias", ThisKey="IDconcelho", OtherKey="IDconcelho")]
		public EntitySet<Freguesias> Freguesias
		{
			get
			{
				return this._Freguesias;
			}
			set
			{
				this._Freguesias.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Freguesias(Freguesias entity)
		{
			this.SendPropertyChanging();
			entity.Concelho = this;
		}
		
		private void detach_Freguesias(Freguesias entity)
		{
			this.SendPropertyChanging();
			entity.Concelho = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Freguesias")]
	public partial class Freguesias : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDfreguesia;
		
		private int _IDconcelho;
		
		private string _NomeFreguesia;
		
		private EntityRef<Concelho> _Concelho;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDfreguesiaChanging(int value);
    partial void OnIDfreguesiaChanged();
    partial void OnIDconcelhoChanging(int value);
    partial void OnIDconcelhoChanged();
    partial void OnNomeFreguesiaChanging(string value);
    partial void OnNomeFreguesiaChanged();
    #endregion
		
		public Freguesias()
		{
			this._Concelho = default(EntityRef<Concelho>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDfreguesia", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDfreguesia
		{
			get
			{
				return this._IDfreguesia;
			}
			set
			{
				if ((this._IDfreguesia != value))
				{
					this.OnIDfreguesiaChanging(value);
					this.SendPropertyChanging();
					this._IDfreguesia = value;
					this.SendPropertyChanged("IDfreguesia");
					this.OnIDfreguesiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDconcelho", DbType="Int NOT NULL")]
		public int IDconcelho
		{
			get
			{
				return this._IDconcelho;
			}
			set
			{
				if ((this._IDconcelho != value))
				{
					if (this._Concelho.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDconcelhoChanging(value);
					this.SendPropertyChanging();
					this._IDconcelho = value;
					this.SendPropertyChanged("IDconcelho");
					this.OnIDconcelhoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NomeFreguesia", DbType="VarChar(35) NOT NULL", CanBeNull=false)]
		public string NomeFreguesia
		{
			get
			{
				return this._NomeFreguesia;
			}
			set
			{
				if ((this._NomeFreguesia != value))
				{
					this.OnNomeFreguesiaChanging(value);
					this.SendPropertyChanging();
					this._NomeFreguesia = value;
					this.SendPropertyChanged("NomeFreguesia");
					this.OnNomeFreguesiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concelho_Freguesias", Storage="_Concelho", ThisKey="IDconcelho", OtherKey="IDconcelho", IsForeignKey=true)]
		public Concelho Concelho
		{
			get
			{
				return this._Concelho.Entity;
			}
			set
			{
				Concelho previousValue = this._Concelho.Entity;
				if (((previousValue != value) 
							|| (this._Concelho.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Concelho.Entity = null;
						previousValue.Freguesias.Remove(this);
					}
					this._Concelho.Entity = value;
					if ((value != null))
					{
						value.Freguesias.Add(this);
						this._IDconcelho = value.IDconcelho;
					}
					else
					{
						this._IDconcelho = default(int);
					}
					this.SendPropertyChanged("Concelho");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hospedagem")]
	public partial class Hospedagem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDhospe;
		
		private int _IDpraia;
		
		private string _NomeHospe;
		
		private string _MoradaHospe;
		
		private int _DistanPraia;
		
		private short _Classificacao;
		
		private short _Camping;
		
		private EntityRef<Praia> _Praia;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDhospeChanging(int value);
    partial void OnIDhospeChanged();
    partial void OnIDpraiaChanging(int value);
    partial void OnIDpraiaChanged();
    partial void OnNomeHospeChanging(string value);
    partial void OnNomeHospeChanged();
    partial void OnMoradaHospeChanging(string value);
    partial void OnMoradaHospeChanged();
    partial void OnDistanPraiaChanging(int value);
    partial void OnDistanPraiaChanged();
    partial void OnClassificacaoChanging(short value);
    partial void OnClassificacaoChanged();
    partial void OnCampingChanging(short value);
    partial void OnCampingChanged();
    #endregion
		
		public Hospedagem()
		{
			this._Praia = default(EntityRef<Praia>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDhospe", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDhospe
		{
			get
			{
				return this._IDhospe;
			}
			set
			{
				if ((this._IDhospe != value))
				{
					this.OnIDhospeChanging(value);
					this.SendPropertyChanging();
					this._IDhospe = value;
					this.SendPropertyChanged("IDhospe");
					this.OnIDhospeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDpraia", DbType="Int NOT NULL")]
		public int IDpraia
		{
			get
			{
				return this._IDpraia;
			}
			set
			{
				if ((this._IDpraia != value))
				{
					if (this._Praia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDpraiaChanging(value);
					this.SendPropertyChanging();
					this._IDpraia = value;
					this.SendPropertyChanged("IDpraia");
					this.OnIDpraiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NomeHospe", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string NomeHospe
		{
			get
			{
				return this._NomeHospe;
			}
			set
			{
				if ((this._NomeHospe != value))
				{
					this.OnNomeHospeChanging(value);
					this.SendPropertyChanging();
					this._NomeHospe = value;
					this.SendPropertyChanged("NomeHospe");
					this.OnNomeHospeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoradaHospe", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MoradaHospe
		{
			get
			{
				return this._MoradaHospe;
			}
			set
			{
				if ((this._MoradaHospe != value))
				{
					this.OnMoradaHospeChanging(value);
					this.SendPropertyChanging();
					this._MoradaHospe = value;
					this.SendPropertyChanged("MoradaHospe");
					this.OnMoradaHospeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanPraia", DbType="Int NOT NULL")]
		public int DistanPraia
		{
			get
			{
				return this._DistanPraia;
			}
			set
			{
				if ((this._DistanPraia != value))
				{
					this.OnDistanPraiaChanging(value);
					this.SendPropertyChanging();
					this._DistanPraia = value;
					this.SendPropertyChanged("DistanPraia");
					this.OnDistanPraiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classificacao", DbType="SmallInt NOT NULL")]
		public short Classificacao
		{
			get
			{
				return this._Classificacao;
			}
			set
			{
				if ((this._Classificacao != value))
				{
					this.OnClassificacaoChanging(value);
					this.SendPropertyChanging();
					this._Classificacao = value;
					this.SendPropertyChanged("Classificacao");
					this.OnClassificacaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Camping", DbType="SmallInt NOT NULL")]
		public short Camping
		{
			get
			{
				return this._Camping;
			}
			set
			{
				if ((this._Camping != value))
				{
					this.OnCampingChanging(value);
					this.SendPropertyChanging();
					this._Camping = value;
					this.SendPropertyChanged("Camping");
					this.OnCampingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Praia_Hospedagem", Storage="_Praia", ThisKey="IDpraia", OtherKey="IDpraia", IsForeignKey=true)]
		public Praia Praia
		{
			get
			{
				return this._Praia.Entity;
			}
			set
			{
				Praia previousValue = this._Praia.Entity;
				if (((previousValue != value) 
							|| (this._Praia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Praia.Entity = null;
						previousValue.Hospedagem1.Remove(this);
					}
					this._Praia.Entity = value;
					if ((value != null))
					{
						value.Hospedagem1.Add(this);
						this._IDpraia = value.IDpraia;
					}
					else
					{
						this._IDpraia = default(int);
					}
					this.SendPropertyChanged("Praia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Praia")]
	public partial class Praia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDpraia;
		
		private int _IDfreguesia;
		
		private string _NomePraia;
		
		private string _MoradaPraia;
		
		private int _ExtensaoPraia;
		
		private short _BandeiraAzul;
		
		private short _TemperaturaAgua;
		
		private short _AcessoSoBarco;
		
		private short _Hospedagem;
		
		private short _Restaurante;
		
		private System.Nullable<int> _Classificacao;
		
		private EntitySet<Hospedagem> _Hospedagem1;
		
		private EntitySet<Restaurantes> _Restaurantes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDpraiaChanging(int value);
    partial void OnIDpraiaChanged();
    partial void OnIDfreguesiaChanging(int value);
    partial void OnIDfreguesiaChanged();
    partial void OnNomePraiaChanging(string value);
    partial void OnNomePraiaChanged();
    partial void OnMoradaPraiaChanging(string value);
    partial void OnMoradaPraiaChanged();
    partial void OnExtensaoPraiaChanging(int value);
    partial void OnExtensaoPraiaChanged();
    partial void OnBandeiraAzulChanging(short value);
    partial void OnBandeiraAzulChanged();
    partial void OnTemperaturaAguaChanging(short value);
    partial void OnTemperaturaAguaChanged();
    partial void OnAcessoSoBarcoChanging(short value);
    partial void OnAcessoSoBarcoChanged();
    partial void OnHospedagemChanging(short value);
    partial void OnHospedagemChanged();
    partial void OnRestauranteChanging(short value);
    partial void OnRestauranteChanged();
    partial void OnClassificacaoChanging(System.Nullable<int> value);
    partial void OnClassificacaoChanged();
    #endregion
		
		public Praia()
		{
			this._Hospedagem1 = new EntitySet<Hospedagem>(new Action<Hospedagem>(this.attach_Hospedagem1), new Action<Hospedagem>(this.detach_Hospedagem1));
			this._Restaurantes = new EntitySet<Restaurantes>(new Action<Restaurantes>(this.attach_Restaurantes), new Action<Restaurantes>(this.detach_Restaurantes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDpraia", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDpraia
		{
			get
			{
				return this._IDpraia;
			}
			set
			{
				if ((this._IDpraia != value))
				{
					this.OnIDpraiaChanging(value);
					this.SendPropertyChanging();
					this._IDpraia = value;
					this.SendPropertyChanged("IDpraia");
					this.OnIDpraiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDfreguesia", DbType="Int NOT NULL")]
		public int IDfreguesia
		{
			get
			{
				return this._IDfreguesia;
			}
			set
			{
				if ((this._IDfreguesia != value))
				{
					this.OnIDfreguesiaChanging(value);
					this.SendPropertyChanging();
					this._IDfreguesia = value;
					this.SendPropertyChanged("IDfreguesia");
					this.OnIDfreguesiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NomePraia", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string NomePraia
		{
			get
			{
				return this._NomePraia;
			}
			set
			{
				if ((this._NomePraia != value))
				{
					this.OnNomePraiaChanging(value);
					this.SendPropertyChanging();
					this._NomePraia = value;
					this.SendPropertyChanged("NomePraia");
					this.OnNomePraiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoradaPraia", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MoradaPraia
		{
			get
			{
				return this._MoradaPraia;
			}
			set
			{
				if ((this._MoradaPraia != value))
				{
					this.OnMoradaPraiaChanging(value);
					this.SendPropertyChanging();
					this._MoradaPraia = value;
					this.SendPropertyChanged("MoradaPraia");
					this.OnMoradaPraiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensaoPraia", DbType="Int NOT NULL")]
		public int ExtensaoPraia
		{
			get
			{
				return this._ExtensaoPraia;
			}
			set
			{
				if ((this._ExtensaoPraia != value))
				{
					this.OnExtensaoPraiaChanging(value);
					this.SendPropertyChanging();
					this._ExtensaoPraia = value;
					this.SendPropertyChanged("ExtensaoPraia");
					this.OnExtensaoPraiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BandeiraAzul", DbType="SmallInt NOT NULL")]
		public short BandeiraAzul
		{
			get
			{
				return this._BandeiraAzul;
			}
			set
			{
				if ((this._BandeiraAzul != value))
				{
					this.OnBandeiraAzulChanging(value);
					this.SendPropertyChanging();
					this._BandeiraAzul = value;
					this.SendPropertyChanged("BandeiraAzul");
					this.OnBandeiraAzulChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemperaturaAgua", DbType="SmallInt NOT NULL")]
		public short TemperaturaAgua
		{
			get
			{
				return this._TemperaturaAgua;
			}
			set
			{
				if ((this._TemperaturaAgua != value))
				{
					this.OnTemperaturaAguaChanging(value);
					this.SendPropertyChanging();
					this._TemperaturaAgua = value;
					this.SendPropertyChanged("TemperaturaAgua");
					this.OnTemperaturaAguaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcessoSoBarco", DbType="SmallInt NOT NULL")]
		public short AcessoSoBarco
		{
			get
			{
				return this._AcessoSoBarco;
			}
			set
			{
				if ((this._AcessoSoBarco != value))
				{
					this.OnAcessoSoBarcoChanging(value);
					this.SendPropertyChanging();
					this._AcessoSoBarco = value;
					this.SendPropertyChanged("AcessoSoBarco");
					this.OnAcessoSoBarcoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospedagem", DbType="SmallInt NOT NULL")]
		public short Hospedagem
		{
			get
			{
				return this._Hospedagem;
			}
			set
			{
				if ((this._Hospedagem != value))
				{
					this.OnHospedagemChanging(value);
					this.SendPropertyChanging();
					this._Hospedagem = value;
					this.SendPropertyChanged("Hospedagem");
					this.OnHospedagemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Restaurante", DbType="SmallInt NOT NULL")]
		public short Restaurante
		{
			get
			{
				return this._Restaurante;
			}
			set
			{
				if ((this._Restaurante != value))
				{
					this.OnRestauranteChanging(value);
					this.SendPropertyChanging();
					this._Restaurante = value;
					this.SendPropertyChanged("Restaurante");
					this.OnRestauranteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classificacao", DbType="Int")]
		public System.Nullable<int> Classificacao
		{
			get
			{
				return this._Classificacao;
			}
			set
			{
				if ((this._Classificacao != value))
				{
					this.OnClassificacaoChanging(value);
					this.SendPropertyChanging();
					this._Classificacao = value;
					this.SendPropertyChanged("Classificacao");
					this.OnClassificacaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Praia_Hospedagem", Storage="_Hospedagem1", ThisKey="IDpraia", OtherKey="IDpraia")]
		public EntitySet<Hospedagem> Hospedagem1
		{
			get
			{
				return this._Hospedagem1;
			}
			set
			{
				this._Hospedagem1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Praia_Restaurantes", Storage="_Restaurantes", ThisKey="IDpraia", OtherKey="IDpraia")]
		public EntitySet<Restaurantes> Restaurantes
		{
			get
			{
				return this._Restaurantes;
			}
			set
			{
				this._Restaurantes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hospedagem1(Hospedagem entity)
		{
			this.SendPropertyChanging();
			entity.Praia = this;
		}
		
		private void detach_Hospedagem1(Hospedagem entity)
		{
			this.SendPropertyChanging();
			entity.Praia = null;
		}
		
		private void attach_Restaurantes(Restaurantes entity)
		{
			this.SendPropertyChanging();
			entity.Praia = this;
		}
		
		private void detach_Restaurantes(Restaurantes entity)
		{
			this.SendPropertyChanging();
			entity.Praia = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Restaurantes")]
	public partial class Restaurantes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDrest;
		
		private int _IDpraia;
		
		private string _NomeRest;
		
		private string _MoradaRest;
		
		private int _DistanPraia;
		
		private System.Nullable<int> _Classificacao;
		
		private EntityRef<Praia> _Praia;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDrestChanging(int value);
    partial void OnIDrestChanged();
    partial void OnIDpraiaChanging(int value);
    partial void OnIDpraiaChanged();
    partial void OnNomeRestChanging(string value);
    partial void OnNomeRestChanged();
    partial void OnMoradaRestChanging(string value);
    partial void OnMoradaRestChanged();
    partial void OnDistanPraiaChanging(int value);
    partial void OnDistanPraiaChanged();
    partial void OnClassificacaoChanging(System.Nullable<int> value);
    partial void OnClassificacaoChanged();
    #endregion
		
		public Restaurantes()
		{
			this._Praia = default(EntityRef<Praia>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDrest", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDrest
		{
			get
			{
				return this._IDrest;
			}
			set
			{
				if ((this._IDrest != value))
				{
					this.OnIDrestChanging(value);
					this.SendPropertyChanging();
					this._IDrest = value;
					this.SendPropertyChanged("IDrest");
					this.OnIDrestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDpraia", DbType="Int NOT NULL")]
		public int IDpraia
		{
			get
			{
				return this._IDpraia;
			}
			set
			{
				if ((this._IDpraia != value))
				{
					if (this._Praia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDpraiaChanging(value);
					this.SendPropertyChanging();
					this._IDpraia = value;
					this.SendPropertyChanged("IDpraia");
					this.OnIDpraiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NomeRest", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string NomeRest
		{
			get
			{
				return this._NomeRest;
			}
			set
			{
				if ((this._NomeRest != value))
				{
					this.OnNomeRestChanging(value);
					this.SendPropertyChanging();
					this._NomeRest = value;
					this.SendPropertyChanged("NomeRest");
					this.OnNomeRestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoradaRest", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MoradaRest
		{
			get
			{
				return this._MoradaRest;
			}
			set
			{
				if ((this._MoradaRest != value))
				{
					this.OnMoradaRestChanging(value);
					this.SendPropertyChanging();
					this._MoradaRest = value;
					this.SendPropertyChanged("MoradaRest");
					this.OnMoradaRestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanPraia", DbType="Int NOT NULL")]
		public int DistanPraia
		{
			get
			{
				return this._DistanPraia;
			}
			set
			{
				if ((this._DistanPraia != value))
				{
					this.OnDistanPraiaChanging(value);
					this.SendPropertyChanging();
					this._DistanPraia = value;
					this.SendPropertyChanged("DistanPraia");
					this.OnDistanPraiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classificacao", DbType="Int")]
		public System.Nullable<int> Classificacao
		{
			get
			{
				return this._Classificacao;
			}
			set
			{
				if ((this._Classificacao != value))
				{
					this.OnClassificacaoChanging(value);
					this.SendPropertyChanging();
					this._Classificacao = value;
					this.SendPropertyChanged("Classificacao");
					this.OnClassificacaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Praia_Restaurantes", Storage="_Praia", ThisKey="IDpraia", OtherKey="IDpraia", IsForeignKey=true)]
		public Praia Praia
		{
			get
			{
				return this._Praia.Entity;
			}
			set
			{
				Praia previousValue = this._Praia.Entity;
				if (((previousValue != value) 
							|| (this._Praia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Praia.Entity = null;
						previousValue.Restaurantes.Remove(this);
					}
					this._Praia.Entity = value;
					if ((value != null))
					{
						value.Restaurantes.Add(this);
						this._IDpraia = value.IDpraia;
					}
					else
					{
						this._IDpraia = default(int);
					}
					this.SendPropertyChanged("Praia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
